<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Messagerie</title>
  @if(flashMessages.has('notification'))
    <script>
      Swal.fire({
        icon: "{{ flashMessages.get('notification').type }}", // 'success', 'error', etc.
        title: "{{ flashMessages.get('notification').message }}",
        showConfirmButton: false,
        timer: 3000
      });
    </script>
  @end

<link rel="stylesheet" href="/resources/css/chat.css">
</head>
<body>
  @include('components/navbar') 
  <div class="container">
    <div class="chat-sidebar">
      <div class="search-bar">
        <input type="text" id="searchInput" placeholder="Rechercher un utilisateur..." />
      </div>
      <div class="user-list">
        <ul id="userList">
            <li class="user-item user-item-global" data-user-id="999999">
              <span class="user-fullName" onclick="openChat(999999)">Global</span>
            </li>
          @each(user in users)
            <li class="user-item" data-user-id="{{ user.id }}">
              <span class="user-fullName" onclick="openChat({{ user.id }})">{{ user.fullName }}</span>
            </li>
          @endeach
        </ul>
      </div>
    </div>

    <div class="chat-window">
      <div id="chatBox" class="chat-box">
        <p class="message">Sélectionnez un utilisateur pour démarrer une conversation</p>
      </div>
      <div id="chatInput" class="chat-input">
        <input type="text" id="messageInput" placeholder="Tapez un message..." disabled />
        <button id="sendButton" disabled>Envoyer</button>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script type="module">
    import { Transmit } from '/node_modules/@adonisjs/transmit-client'

  export const transmit = new Transmit({
    baseUrl: window.location.origin
  })
  let activeSubscription = null;
  let first = true;

  const notifSubscription = transmit.subscription('notifications/' + {{ auth.user.id }});
  notifSubscription.create();
  // quand il y a une nouvelle notification on colori en rouge le pseudo de l'utilisateur envoyeur
  notifSubscription.onMessage((data) => {
    console.log('Nouvelle notification reçue');
    console.log(data);
    const senderId = data.senderId;
    const senderName = data.senderName;
    const senderElement = document.querySelector(`[data-user-id="${senderId}"] .user-fullName`);
    senderElement.style.color = 'red';
    // la couleur redevient noire après avoir cliqué sur l'utilisateur
    senderElement.addEventListener('click', () => {
      senderElement.style.color = 'black';
    });
  });





    // Injecter les utilisateurs dans une variable JavaScript
    const users = [
      @each(user in users)
        @if(user.id !== auth.user.id)
          { id: {{ user.id }}, fullName: '{{ user.fullName }}' },
        @endif
      @endeach
    ];
    // variable pour stocker l'id de l'utilisateur à qui on envoie le message
    let userIdsauv = null;
    let knownChannels = [];
    function scrollToBottom() {
      const chatBox = document.getElementById('chatBox');
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    // Fonction pour charger les messages
    async function loadMessages(receiverId) {
      const response = await fetch(`/messages?receiver_id=${receiverId}`, {
        method: 'GET',
        credentials: 'include', // Permet d'envoyer les cookies de session
        headers: {
          'Content-Type': 'application/json',
        },
      });
      console.log(`Chargement des messages pour l'utilisateur ${receiverId}`);
      console.log(response);
      return response.json();
    }
    
    async function sendMessageToServer(receiverId, content) {
      const response = await fetch('/messages', {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ receiver_id: receiverId, content }),
      });
      if (response.status == 400) {
          Swal.fire({
            icon: 'error',
            title: 'Erreur',
            text: 'Une erreur est survenue lors de l\'envoi du message, attention 128 caractères maximum',
          });
      }
      return response;
    }
    
    // Fonction pour ouvrir un chat
    async function openChat(userId) {

      if (activeSubscription) {
        console.log('Fermeture de la souscription active');
        const unsubscribe = activeSubscription.onMessage(() => {
            console.log('message received!')
          })

          // later
          unsubscribe()
      }
      userIdsauv = userId;
      const selectedUser = users.find(user => user.id === userId);
      const messages = await loadMessages(userId);
      if (userId !== 999999) {
        document.getElementById('chatBox').innerHTML = `<p><strong>Chat avec ${selectedUser.fullName}</strong></p>`;
      } else {
        document.getElementById('chatBox').innerHTML = `<p><strong>Chat Global</strong></p>`;
      }
      // on affiche les precedents messages
      messages.forEach(message => {
        const messageClass = message.senderId === {{ auth.user.id }} ? 'sent' : 'received';
        const formattedTime = new Date(message.createdAt).toLocaleTimeString('fr-FR');
        document.getElementById('chatBox').innerHTML += `<p class="message${messageClass}">${formattedTime} - ${message.senderId === {{ auth.user.id }} ? 'Vous' : message.senderName} : ${message.content}</p>`;
      });
      scrollToBottom();
      // le nom du channel est le plus petit id de l'utilisateur connecté et de l'utilisateur avec qui on discute - le plus grand id
      console.log({{ auth.user.id }});
      let channel = null;
      if (userId == 999999) {
        channel = 'global';
      } else {
        channel = Math.min(userId, {{ auth.user.id }}) + '-' + Math.max(userId, {{ auth.user.id }});
      }
      // on se connecte au channel
      console.log('Connexion au channel ' + channel);

      activeSubscription = transmit.subscription('chats/' + channel + '/messages');
      await activeSubscription.create();
      if (knownChannels.includes(channel)) {
        console.log('Channel déjà connu');
      } else {
        console.log('Nouveau channel');
        activeSubscription.onMessage((data) => {
        console.log('Nouveau message reçu');
        console.log(data);
        const messageClass = data.sender === {{ auth.user.id }} ? 'sent' : 'received';
        const formattedTime = new Date(data.createdAt).toLocaleTimeString('fr-FR');
        document.getElementById('chatBox').innerHTML += `<p class="newmessage${messageClass}">${formattedTime} - ${data.sender === {{ auth.user.id }} ? 'Vous' : data.senderName} : ${data.message}</p>`;
        scrollToBottom();
      });
        knownChannels.push(channel);
        console.log(knownChannels);
      }

      document.getElementById('messageInput').disabled = false;
      document.getElementById('sendButton').disabled = false;
    }
    window.addEventListener('beforeunload', () => {
      if (activeSubscription) {
        console.log('Fermeture de la souscription avant de quitter la page');
                const unsubscribe = activeSubscription.onMessage(() => {
            console.log('message received!')
          })

          // later
          unsubscribe()
      }
    });


    // Attacher l'événement de clic aux éléments de la liste des utilisateurs
    document.querySelectorAll('.user-item').forEach(item => {
      item.addEventListener('click', () => {
        const userId = parseInt(item.getAttribute('data-user-id'));
        openChat(userId);
      });
    });

    // Fonction pour envoyer un message
    function sendMessage() {
      const message = document.getElementById('messageInput').value;
      if (message.trim() !== '') {
        sendMessageToServer(userIdsauv, message);
        document.getElementById('messageInput').value = '';

      }
    }

    // Envoyer le message lorsque le bouton est cliqué
    document.getElementById('sendButton').addEventListener('click', sendMessage);

    // Envoyer le message lorsque la touche "Entrée" est pressée
    document.getElementById('messageInput').addEventListener('keydown', (event) => {
      if (event.key === 'Enter') {
        event.preventDefault();
        sendMessage();
      }
    });

    // Filtrage des utilisateurs par la barre de recherche
    document.getElementById('searchInput').addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const filteredUsers = users.filter(user => user.fullName.toLowerCase().includes(searchTerm));
      const userList = document.getElementById('userList');
      userList.innerHTML = '';

      // Ajouter l'élément "Global" en haut de la liste
      const globalItem = document.createElement('li');
      globalItem.classList.add('user-item', 'user-item-global');
      globalItem.setAttribute('data-user-id', '999999');
      globalItem.innerHTML = '<span class="user-fullName" onclick="openChat(999999)">Global</span>';
      userList.appendChild(globalItem);

      filteredUsers.forEach(user => {
      const listItem = document.createElement('li');
      listItem.classList.add('user-item');
      listItem.setAttribute('data-user-id', user.id);
      listItem.innerHTML = `<span class="user-fullName" onclick="openChat(${user.id})">${user.fullName}</span>`;

      // Attacher l'événement de clic ici
      listItem.addEventListener('click', () => openChat(user.id));

      userList.appendChild(listItem);
      });
    });
  </script>
</body>
</html>