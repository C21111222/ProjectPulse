<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Messagerie</title>
  @if(flashMessages.has('notification'))
    <script>
      Swal.fire({
        icon: "{{ flashMessages.get('notification').type }}", // 'success', 'error', etc.
        title: "{{ flashMessages.get('notification').message }}",
        showConfirmButton: false,
        timer: 3000
      });
    </script>
  @end

  <style>
    /* CSS pour la page de messagerie */
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f5f5f5;
    }

    .container {
      display: flex;
      height: calc(100vh - 60px); /* Ajuster la hauteur pour tenir compte de la navbar */
      margin-top: 60px; /* Ajouter un espace pour la navbar */
    }

    .chat-sidebar {
      width: 25%;
      background-color: #2c3e50;
      color: white;
      display: flex;
      flex-direction: column;
      padding: 15px;
    }

    .search-bar {
      margin-bottom: 20px;
      width: 90%;
    }

    .search-bar input {
      width: 100%;
      padding: 10px;
      font-size: 14px;
      border: none;
      border-radius: 5px;
    }

    .user-list {
      flex-grow: 1;
      overflow-y: auto;
    }

    .user-item {
      padding: 10px;
      margin: 5px 0;
      cursor: pointer;
      border-radius: 5px;
      background-color: #34495e;
      display: flex;
      align-items: center;
      transition: background-color 0.3s;
    }

    .user-item:hover {
      background-color: #1abc9c;
    }

    .user-fullName {
      font-size: 16px;
      color: white;
    }

    .chat-window {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      background-color: #ecf0f1;
    }

    .chat-box {
      flex-grow: 1;
      padding: 20px;
      overflow-y: auto;
      border-bottom: 1px solid #bdc3c7;
    }

    .message {
      color: #7f8c8d;
      font-style: italic;
    }

    .newmessage {
      color: #000;
    }

    .chat-input {
      display: flex;
      padding: 15px;
      background-color: #bdc3c7;
    }

    .chat-input input[type="text"] {
      flex-grow: 1;
      padding: 10px;
      font-size: 14px;
      border: none;
      border-radius: 5px;
      margin-right: 10px;
    }

    .chat-input button {
      padding: 10px 20px;
      font-size: 14px;
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .chat-input button:disabled {
      background-color: #95a5a6;
      cursor: not-allowed;
    }

    .chat-input button:hover:enabled {
      background-color: #2980b9;
    }

    /* Scrollbar styling for user list and chat box */
    .user-list::-webkit-scrollbar,
    .chat-box::-webkit-scrollbar {
      width: 8px;
    }

    .user-list::-webkit-scrollbar-thumb,
    .chat-box::-webkit-scrollbar-thumb {
      background-color: #34495e;
      border-radius: 4px;
    }

    .user-list::-webkit-scrollbar-thumb:hover,
    .chat-box::-webkit-scrollbar-thumb:hover {
      background-color: #1abc9c;
    }

    .messagesent {
      background-color: #3498db;
      color: white;
      align-self: flex-end;
      margin-left: auto;
      padding: 10px;
      border-radius: 10px;
      max-width: 60%;
      word-wrap: break-word;
      white-space: pre-wrap;
    }

    .messagereceived {
      background-color: #303030;
      color: white;
      align-self: flex-start;
      margin-right: auto;
      padding: 10px;
      border-radius: 10px;
      max-width: 60%;
      word-wrap: break-word;
      white-space: pre-wrap;
    }

    .newmessagesent {
      background-color: #3498db;
      color: white;
      align-self: flex-end;
      margin-left: auto;
      padding: 10px;
      border-radius: 10px;
      max-width: 60%;
      word-wrap: break-word;
      white-space: pre-wrap;
    }

    .newmessagereceived {
      background-color: #303030;
      color: white;
      align-self: flex-start;
      margin-right: auto;
      padding: 10px;
      border-radius: 10px;
      max-width: 60%;
      word-wrap: break-word;
      white-space: pre-wrap;
    }

    /* Responsivité */
    @media (max-width: 768px) {
      .container {
        flex-direction: column;
      }

      .chat-sidebar {
        width: 100%;
        height: 50vh;
        order: 2;
      }

      .chat-window {
        width: 100%;
        height: 50vh;
        order: 1;
      }
    }

    @media (max-width: 480px) {
      .chat-sidebar {
        height: 60vh;
      }

      .chat-window {
        height: 40vh;
      }

      .chat-input input[type="text"] {
        font-size: 12px;
        padding: 8px;
      }

      .chat-input button {
        font-size: 12px;
        padding: 8px;
      }
    }
  </style>
</head>
<body>
  @include('components/navbar') 
  <div class="container">
    <div class="chat-sidebar">
      <div class="search-bar">
        <input type="text" id="searchInput" placeholder="Rechercher un utilisateur..." />
      </div>
      <div class="user-list">
        <ul id="userList">
          @each(user in users)
            <li class="user-item" data-user-id="{{ user.id }}">
              <span class="user-fullName" onclick="openChat({{ user.id }})">{{ user.fullName }}</span>
            </li>
          @endeach
        </ul>
      </div>
    </div>

    <div class="chat-window">
      <div id="chatBox" class="chat-box">
        <p class="message">Sélectionnez un utilisateur pour démarrer une conversation</p>
      </div>
      <div id="chatInput" class="chat-input">
        <input type="text" id="messageInput" placeholder="Tapez un message..." disabled />
        <button id="sendButton" disabled>Envoyer</button>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script type="module">
    import { Transmit } from '/node_modules/@adonisjs/transmit-client'

  export const transmit = new Transmit({
    baseUrl: window.location.origin
  })
  let activeSubscription = null;
  let first = true;




    // Injecter les utilisateurs dans une variable JavaScript
    const users = [
      @each(user in users)
        @if(user.id !== auth.user.id)
          { id: {{ user.id }}, fullName: '{{ user.fullName }}' },
        @endif
      @endeach
    ];
    // variable pour stocker l'id de l'utilisateur à qui on envoie le message
    let userIdsauv = null;
    let knownChannels = [];
    function scrollToBottom() {
      const chatBox = document.getElementById('chatBox');
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    // Fonction pour charger les messages
    async function loadMessages(receiverId) {
      const response = await fetch(`/messages?receiver_id=${receiverId}`, {
        method: 'GET',
        credentials: 'include', // Permet d'envoyer les cookies de session
        headers: {
          'Content-Type': 'application/json',
        },
      });
      console.log(`Chargement des messages pour l'utilisateur ${receiverId}`);
      console.log(response);
      return response.json();
    }
    
    async function sendMessageToServer(receiverId, content) {
      const response = await fetch('/messages', {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ receiver_id: receiverId, content }),
      });
      if (response.status == 400) {
          Swal.fire({
            icon: 'error',
            title: 'Erreur',
            text: 'Une erreur est survenue lors de l\'envoi du message, attention 64 caractères maximum',
          });
      }
      return response;
    }
    
    // Fonction pour ouvrir un chat
    async function openChat(userId) {

      if (activeSubscription) {
        console.log('Fermeture de la souscription active');
        const unsubscribe = activeSubscription.onMessage(() => {
            console.log('message received!')
          })

          // later
          unsubscribe()
      }
      userIdsauv = userId;
      const selectedUser = users.find(user => user.id === userId);
      console.log(`Ouverture du chat avec ${selectedUser.fullName}`);
      const messages = await loadMessages(userId);
      document.getElementById('chatBox').innerHTML = `<p><strong>Chat avec ${selectedUser.fullName}</strong></p>`;
      // on affiche les precedents messages
      messages.forEach(message => {
        const messageClass = message.senderId === userId ? 'received' : 'sent';
        document.getElementById('chatBox').innerHTML += `<p class="message${messageClass}">${message.senderId === userId ? selectedUser.fullName : 'Vous'} : ${message.content}</p>`;
      });
      scrollToBottom();
      // le nom du channel est le plus petit id de l'utilisateur connecté et de l'utilisateur avec qui on discute - le plus grand id
      console.log({{ auth.user.id }});
      const channel = Math.min(userId, {{ auth.user.id }}) + '-' + Math.max(userId, {{ auth.user.id }});
      // on se connecte au channel
      console.log('Connexion au channel ' + channel);

      activeSubscription = transmit.subscription('chats/' + channel + '/messages');
      await activeSubscription.create();
      if (knownChannels.includes(channel)) {
        console.log('Channel déjà connu');
      } else {
        console.log('Nouveau channel');
        activeSubscription.onMessage((data) => {
        console.log('Nouveau message reçu');
        console.log(data);
        const messageClass = data.sender === userId ? 'received' : 'sent';
        document.getElementById('chatBox').innerHTML += `<p class="newmessage${messageClass}">${data.sender === userId ? selectedUser.fullName : 'Vous'} : ${data.message}</p>`;
        scrollToBottom();
      });
        knownChannels.push(channel);
        console.log(knownChannels);
      }

      document.getElementById('messageInput').disabled = false;
      document.getElementById('sendButton').disabled = false;
    }
    window.addEventListener('beforeunload', () => {
      if (activeSubscription) {
        console.log('Fermeture de la souscription avant de quitter la page');
                const unsubscribe = activeSubscription.onMessage(() => {
            console.log('message received!')
          })

          // later
          unsubscribe()
      }
    });


    // Attacher l'événement de clic aux éléments de la liste des utilisateurs
    document.querySelectorAll('.user-item').forEach(item => {
      item.addEventListener('click', () => {
        const userId = parseInt(item.getAttribute('data-user-id'));
        openChat(userId);
      });
    });

    // Fonction pour envoyer un message
    function sendMessage() {
      const message = document.getElementById('messageInput').value;
      if (message.trim() !== '') {
        sendMessageToServer(userIdsauv, message);
        document.getElementById('messageInput').value = '';

      }
    }

    // Envoyer le message lorsque le bouton est cliqué
    document.getElementById('sendButton').addEventListener('click', sendMessage);

    // Envoyer le message lorsque la touche "Entrée" est pressée
    document.getElementById('messageInput').addEventListener('keydown', (event) => {
      if (event.key === 'Enter') {
        event.preventDefault();
        sendMessage();
      }
    });

    // Filtrage des utilisateurs par la barre de recherche
    document.getElementById('searchInput').addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const filteredUsers = users.filter(user => user.fullName.toLowerCase().includes(searchTerm));
      const userList = document.getElementById('userList');
      userList.innerHTML = '';
      filteredUsers.forEach(user => {
        const listItem = document.createElement('li');
        listItem.classList.add('user-item');
        listItem.setAttribute('data-user-id', user.id);
        listItem.textContent = user.fullName;

        // Attacher l'événement de clic ici
        listItem.addEventListener('click', () => openChat(user.id));

        userList.appendChild(listItem);
      });
    });
  </script>
</body>
</html>