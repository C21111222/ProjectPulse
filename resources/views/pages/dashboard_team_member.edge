<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
      Gestion de l'équipe
    </title>
    <link rel="stylesheet" href="/css/dashboard.css" />
  </head>
  <body>
    @include('components/navbar')

    <div class="main-container">
      <div class="container">
        <h1>
          Gestion de l'équipe {{ team.name }}
        </h1>
        <h2>
          Membres de l'équipe
        </h2>
        <ul class="user-list">
          @each(user in members)
            <li>
              <span>{{ user.full_name }}</span>
              <span class="user-role">{{ user.role }}</span>
              @if(user.id === auth.user.id)
                <span>(Vous)</span>
              @else
                @if(user.role == 'admin')
                  <span>(Administrateur)</span>
                @endif
              @endif
            </li>
          @endeach
        </ul>
        <a href="/dashboard" class="button back-button">Retour</a>
      </div>

      <!-- Section de chat d'équipe -->
      <div class="chat-container">
        <h2>
          Chat d'équipe
        </h2>
        <div id="chatBox" class="chat-box">
        </div>
        <div class="chat-input">
          <input type="text" id="messageInput" placeholder="Tapez votre message..." />
          <button id="sendButton">Envoyer</button>
        </div>
      </div>
    </div>
    <div class="timeline-container">
      <div class="timeline-header">
        <h2>Tâches de l'équipe</h2>
        <div class="project-dates">
          <span>Début : {{ project.start_date }}</span>
          <span>Fin : {{ project.end_date }}</span>
        </div>
      </div>
      <button class="button invite" onclick="toggleTaskModal()">Ajouter une tâche</button>
      <div class="timeline">
      
      </div>
    </div>
    <script>

        function formatDate(dateString) {
          const options = { year: 'numeric', month: 'long', day: 'numeric' };
          return new Date(dateString).toLocaleDateString('fr-FR', options);
        }
        function loadTasks(){
          fetch(`/team_task/{{ team.id }}`, {
            method: "GET",
            credentials: "include",
            headers: {
              "Content-Type": "application/json"
            }
          }).then(response => {
            if (!response.ok) {
              return response.json().then(errorData => {
                throw new Error("Erreur lors du chargement des tâches : " + errorData.message);
              });
            }
            return response.json();
          }).then(data => {
            console.log("Tâches récupérées :");
            console.log(data);
            // on récupère l'élément timeline et on supprime les tâches déjà affichées
            const timeline = document.querySelector(".timeline");
            timeline.innerHTML = "";
            // on trie les tâches par date de début
            data.sort((a, b) => new Date(a.startDate) - new Date(b.startDate));
            data.forEach(task => {
              const taskElement = document.createElement("div");
              taskElement.classList.add("task");
              taskElement.classList.add(task.status);
              taskElement.innerHTML = `
                <div class="content">
                  <span>Titre : ${task.title}</span>
                  <span> Desc : ${task.description}</span>
                  <span>${formatDate(task.start_date)} - ${formatDate(task.end_date)}</span>
                  <span> Priorité : ${task.priority}</span>
                  <span> Status : ${task.status}</span>
                  ${task.users.map(user => `<img src="${user.image_url}" alt="Photo de ${user.full_name}" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 10px; object-fit: cover;" />`).join("")}
                </div>
              `;
              timeline.appendChild(taskElement);
            });
          }).catch(error => {
            console.error("Erreur lors du chargement des tâches :", error);
            alert("Erreur lors du chargement des tâches : " + error.message);
          });
        }
  
        loadTasks();
        function toggleTaskModal() {
          const today = new Date().toISOString().split('T')[0];
          const tomorrow = new Date(Date.now() + 86400000).toISOString().split('T')[0];
          document.getElementById('taskStartDate').value = today;
          document.getElementById('taskEndDate').value = tomorrow;
          document.getElementById("taskModal").style.display = "block";
        }
  
        function closeTaskModal() {
          document.getElementById("taskModal").style.display = "none";
        }
        document.getElementById('taskForm').addEventListener('submit', function(event) {
          event.preventDefault();
          addTask();
        });
  
        function addTask() {
    
          const name = document.getElementById("taskName").value;
          const description = document.getElementById("taskDescription").value;
          const status = document.getElementById("taskStatus").value;
          const start_date = document.getElementById("taskStartDate").value;
          const end_date = document.getElementById("taskEndDate").value;
          const priority = document.getElementById("taskPriority").value;
          const users = Array.from(document.getElementById("taskUsers").selectedOptions).map(option => option.value);
        
          console.log("Données de la tâche :", {
            teamId: {{ team.id }},
            title: name,
            description: description,
            priority: priority,
            status: status,
            start_date: start_date,
            end_date: end_date,
            users: users,
          });
          alert("Ajout de tâche");
          fetch(`/tasks`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "credentials": "include"
            },
            body: JSON.stringify({
              teamId: {{ team.id }},
              title: name,
              description: description,
              priority: priority,
              status: status,
              start_date: start_date,
              end_date: end_date,
              users: users,
            })
          }).then(response => {
            if (!response.ok) {
              alert("Erreur lors de l'ajout de la tâche : " + response );
              return response.json().then(errorData => {
                throw new Error("Erreur lors de l'ajout de la tâche : " + errorData.message);
              });
            }
            return response.json();
          }).then(data => {
            alert("Tâche ajoutée avec succès.");
            // on recharge la page pour mettre à jour la liste des tâches
            location.reload();
          }).catch(error => {
            console.error("Erreur lors de l'ajout de la tâche :", error);
            alert("Erreur lors de l'ajout de la tâche : " + error.message);
          });
          loadTasks();
          // on ferme la modal après avoir ajouté la tâche
          closeTaskModal();
        }
    </script>

    <script type="module">
      import {
        Transmit
      } from "/node_modules/@adonisjs/transmit-client";
      
      export const transmit = new Transmit({
        baseUrl: window.location.origin
      });
      
      function scrollToBottom() {
        const chatBox = document.getElementById("chatBox");
        chatBox.scrollTop = chatBox.scrollHeight;
      }
      
      const notifSubscription = transmit.subscription(`chats/team-{{ team.id }}/messages`);
      
      notifSubscription.create();
      
      async function loadMessages(receiverId) {
        const response = await fetch(`/team_messages?teamId={{ team.id }}`, {
          method: "GET",
          credentials: "include",
          // Permet d'envoyer les cookies de session
          headers: {
            "Content-Type": "application/json"
          }
        });
        console.log(`Chargement des messages pour l'utilisateur ${receiverId}`);
        console.log(response);
        return response.json();
      }
      
      const messages = await loadMessages({{ team.id }});
      
      console.log(messages);
      
      const chatBox = document.querySelector(".chat-box");
      
      messages.forEach(message => {
        const messageClass = message.senderId === {{ auth.user.id }} ? "sent" : "received";
        const formattedTime = new Date(message.createdAt).toLocaleTimeString("fr-FR");
        chatBox.innerHTML += `
            <div class="message-container ${messageClass}" style="display: flex;  margin-bottom: 10px;">
              <img 
                src="${message.sender.imageUrl}" 
                alt="Photo de ${message.senderName}" 
                style="width: 30px; height: 30px; border-radius: 50%; margin-right: 10px; object-fit: cover;"
              />
              <p class="message-content" style="margin: 0;"><strong>${message.senderId === {{ auth.user.id }} ? "Vous" : message.senderName}</strong>: ${message.content} <span style="font-size: 0.8em; color: gray;">(${formattedTime})</span></p>
            </div>`;
      });
      
      scrollToBottom();
      
      async function sendMessage() {
        const message = document.getElementById("messageInput").value;
        const response = await fetch(`/team_messages`, {
          method: "POST",
          credentials: "include",
          // Permet d'envoyer les cookies de session
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            teamId: {{team.id}},
            message: message
          })
        });
        console.log(response);
        return response.json();
      }
      
      document.getElementById("sendButton").addEventListener("click", sendMessage);
      
      let unsubscribe = notifSubscription.onMessage(data => {
        console.log("Nouveau message reçu :", data);
        const formattedTime = new Date(data.createdAt).toLocaleTimeString("fr-FR");
        chatBox.innerHTML += `
            <div class="message-container received" style="display: flex;  margin-bottom: 10px;">
              <img 
                src="${data.senderImage}" 
                alt="Photo de ${data.senderName}" 
                style="width: 30px; height: 30px; border-radius: 50%; margin-right: 10px; object-fit: cover;"
              />
              <p class="message-content" style="margin: 0;"><strong>${data.senderName === "{{ auth.user.fullName }}" ? "Vous" : data.senderName}</strong>: ${data.message} <span style="font-size: 0.8em; color: gray;">(${formattedTime})</span></p>
            </div>`;
        scrollToBottom();
      });

      window.addEventListener("beforeunload", () => {
        unsubscribe();
      });
    </script>
  </body>
</html>
