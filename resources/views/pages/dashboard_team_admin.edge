<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestion de l'équipe</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f4f4f9;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      flex-direction: column;
    }

    .message-container.received {
      display: flex;
      justify-content: flex-start;
      /* Les messages commencent du centre */
      flex-direction: row;
      /* Le texte vient de gauche à droite */
      text-align: left;
      align-self: flex-start;
      margin-right: auto;
      /* Pousse le conteneur vers la gauche */
      max-width: 50%;
      /* Limite la largeur du message */
    }
    
    .message-container.received .message-content {
      background-color: #c2bdbd;
      /* Couleur du fond pour les messages reçus */
      border-radius: 0 10px 10px 10px;
      /* Arrondi à droite, angle gauche non arrondi */
      padding: 12px 12px;
      /* Réduction du padding pour éviter l'espace à gauche */
      word-wrap: break-word;
      /* Gère le texte long */
      white-space: pre-wrap;
      /* Garde les espaces et retours à la ligne */
      margin-left: 5px;
      /* Pas de marge à gauche */
      margin-right: 25px;
      /* Pas de marge à droite */
      max-width: 100%;
      /* Permet au message de prendre toute la largeur disponible */
    }
    
    .message-container.sent {
      display: flex;
      justify-content: flex-start;
      /* Les messages commencent du centre */
      flex-direction: row-reverse;
      /* Le texte vient de droite à gauche */
      text-align: left;
      /* Alignement du texte à droite */
      align-self: flex-end;
      margin-left: auto;
      /* Pousse le conteneur vers la droite */
      max-width: 50%;
      /* Limite la largeur du message */
    }
    
    .message-container.sent .message-content {
      background-color: #d4f1c5;
      /* Couleur du fond du message */
      border-radius: 10px 0 10px 10px;
      /* Arrondi à gauche, angle droit non arrondi */
      padding: 12px 12px;
      /* Réduction du padding pour éviter l'espace à gauche */
      word-wrap: break-word;
      /* Gère le texte long */
      white-space: pre-wrap;
      /* Garde les espaces et retours à la ligne */
      margin-right: 25px;
      /* Pas de marge à droite */
      margin-left: 5px;
      /* Pas de marge à gauche */
      max-width: 100%;
      /* Permet au message de prendre toute la largeur disponible */
    }
    
    .message-content {
      padding: 10px;
      border-radius: 10px;
      margin: 5px;
      max-width: 70%;
    }

    .main-container {
      display: flex;
      flex-direction: column;
      width: 90%;
      max-width: 1400px;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      margin-bottom: 20px;
    }

    @media (min-width: 768px) {
      .main-container {
        flex-direction: row;
      }
    }

    .container {
      flex: 1;
      padding: 30px;
      text-align: center;
    }

    .chat-container {
      flex: 1;
      padding: 30px;
      border-top: 1px solid #ddd;
    }

    @media (min-width: 768px) {
      .chat-container {
        border-top: none;
        border-left: 1px solid #ddd;
      }
    }

    h1, h2 {
      color: #333;
      margin-bottom: 20px;
    }

    .user-list,
    .invite-list {
      list-style-type: none;
      padding: 0;
      margin: 0;
    }

    .user-list li,
    .invite-list li {
      background-color: #f4f4f9;
      padding: 10px;
      margin-bottom: 10px;
      border-radius: 5px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .user-actions,
    .invite-actions {
      display: flex;
      gap: 10px;
    }

    .button {
      padding: 5px 10px;
      font-size: 14px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      text-decoration: none;
      color: white;
    }

    .invite {
      background-color: #007BFF;
    }

    .invite:hover {
      background-color: #0056b3;
    }

    .promote {
      background-color: #4CAF50;
    }

    .promote:hover {
      background-color: #388E3C;
    }

    .demote {
      background-color: #FFC107;
    }

    .demote:hover {
      background-color: #FFA000;
    }

    .delete {
      background-color: #e53935;
    }

    .delete:hover {
      background-color: #c62828;
    }

    .back-button {
      margin-top: 20px;
      background-color: #e53935;
    }

    .back-button:hover {
      background-color: #c62828;
    }

  /* Styles pour le modal */
.modal {
  display: none; /* Masqué par défaut */
  position: fixed; /* Reste en place même lors du défilement */
  z-index: 1; /* Au-dessus de tout autre contenu */
  left: 0;
  top: 0;
  width: 100%; /* Largeur complète */
  height: 100%; /* Hauteur complète */
  overflow: auto; /* Activer le défilement si nécessaire */
  background-color: rgb(0,0,0); /* Couleur de fond */
  background-color: rgba(0,0,0,0.4); /* Couleur de fond avec opacité */
  padding-top: 60px; /* Espacement en haut */
}

.modal-content {
  background-color: #fefefe;
  margin: 5% auto; /* 5% du haut et centré */
  padding: 20px;
  border: 1px solid #888;
  width: 80%; /* Largeur du contenu */
  max-width: 600px; /* Largeur maximale */
  border-radius: 10px; /* Bordures arrondies */
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

.modal-content h2 {
  margin-top: 0;
}

.modal-content label {
  display: block;
  margin-top: 10px;
  font-weight: bold;
}

.modal-content input[type="text"],
.modal-content input[type="date"],
.modal-content textarea,
.modal-content select {
  width: 100%;
  padding: 10px;
  margin-top: 5px;
  margin-bottom: 15px;
  border: 1px solid #ccc;
  border-radius: 5px;
  box-sizing: border-box;
}

.modal-content button {
  background-color: #007BFF;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.modal-content button:hover {
  background-color: #0056b3;
}
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }

    .close:hover,
    .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
    }

    .user-role {
      margin-left: 10px;
      font-style: italic;
      color: #888;
    }

    .chat-box {
      height: 300px;
      overflow-y: scroll;
      border: 1px solid #ddd;
      padding: 10px;
      background-color: #f9f9f9;
      border-radius: 5px;
    }

    .chat-input {
      display: flex;
      margin-top: 10px;
    }

    .chat-input input {
      flex-grow: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px 0 0 5px;
    }

    .chat-input button {
      padding: 10px;
      border: none;
      background-color: #007BFF;
      color: white;
      border-radius: 0 5px 5px 0;
      cursor: pointer;
    }

    .chat-input button:hover {
      background-color: #0056b3;
    }

    .timeline-container {
      width: 90%;
      max-width: 1400px;
      background-color: white;
      padding: 30px;
      box-shadow: 0 -4px 6px rgba(0, 0, 0, 0.1);
      border-top: 1px solid #ddd;
      border-radius: 10px;
      overflow-x: auto; /* Ajout de la barre de défilement horizontale */
      white-space: nowrap; /* Empêche le retour à la ligne pour les éléments enfants */
    }
    
    .timeline {
      display: inline-block; /* Affiche les éléments en ligne */
      position: relative;
      margin: 0 auto;
    }
    
    
    .task {
      display: inline-block; /* Affiche les tâches en ligne */
      padding: 10px 40px;
      position: relative;
      background-color: inherit;
      width: auto; /* Ajuste la largeur automatiquement */
    }
    
    
    .content {
      padding: 20px 30px;
      background-color: white;
      position: relative;
      border-radius: 6px;
      display: inline-block;
      text-align: left;
      white-space: normal; /* Permet le retour à la ligne pour le texte */
    }

    .task span {
      display: block;
      margin-bottom: 5px;
    }
  </style>
</head>
<body>
  @include('components/navbar')

  <div class="main-container">
    <div class="container">
      <h1>
        Gestion de l'équipe {{ team.name }}
      </h1>
      <h2>
        Membres de l'équipe
      </h2>
      <ul class="user-list">
        @each(user in members)
          <li>
            <span>{{ user.full_name }}</span>
            <span class="user-role">{{ user.role }}</span>
            @if(user.id === auth.user.id)
              <span>(Vous)</span>
            @else
              @if(user.role == 'admin')
                <span>(Administrateur)</span>
              @else
                <div class="user-actions">
                  <button class="button promote" onclick="promoteToManager({{ user.id }})">Promouvoir</button>
                  <button class="button demote" onclick="demoteManager({{ user.id }})">Rétrograder</button>
                  <button class="button delete" onclick="deleteUser({{ user.id }})">Supprimer</button>
                </div>
              @endif
            @endif
          </li>
        @endeach
      </ul>
      <button class="button invite" onclick="openInviteModal()">Inviter</button>
      <a href="/dashboard" class="button back-button">Retour</a>
    </div>

    <!-- Section de chat d'équipe -->
    <div class="chat-container">
      <h2>
        Chat d'équipe
      </h2>
      <div id="chatBox" class="chat-box">
      </div>
      <div class="chat-input">
        <input type="text" id="messageInput" placeholder="Tapez votre message..." />
        <button id="sendButton">Envoyer</button>
      </div>
    </div>
  </div>

  <div class="timeline-container">
    <h2>Tâches de l'équipe</h2>
    <button class="button invite" onclick="toggleTaskModal()">Ajouter une tâche</button>
    <div class="timeline">
    
    </div>
  </div>

  <!-- Modal pour ajouter une tâche -->
  <div id="taskModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeTaskModal()">&times;</span>
      <h2>
        Ajouter une tâche
      </h2>
      <form id="taskForm">
        <label for="taskName">Nom de la tâche</label>
        <input type="text" id="taskName" name="taskName" required />
        <label for="taskDescription">Description de la tâche</label>
        <textarea id="taskDescription" name="taskDescription" required></textarea>
        <label for="taskStatus">Statut de la tâche</label>
        <select id="taskStatus" name="taskStatus" required>
          <option value="waiting">En attente</option>
          <option value="in_progress">En cours</option>
          <option value="done">Terminée</option>
        </select>
        <label for="taskPriority">Priorité de la tâche</label>
        <select id="taskPriority" name="taskPriority" required>
          <option value="low">Basse</option>
          <option value="medium">Moyenne</option>
          <option value="high">Haute</option>
        </select>
        <label for="taskStartDate">Date de début</label>
        <input type="date" id="taskStartDate" name="taskStartDate" required />
        <label for="taskEndDate">Date de fin</label>
        <input type="date" id="taskEndDate" name="taskEndDate" required />
        <label for="taskUsers">Utilisateurs assignés</label>
        <select id="taskUsers" name="taskUsers" multiple required>
          @each(user in members)
            <option value="{{ user.id }}">{{ user.full_name }}</option>
          @endeach
        </select>
        <button type="submit" class="button invite">Ajouter</button>
      </form>
    </div>
  </div>

  <!-- Modal pour inviter des utilisateurs -->
  <div id="inviteModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeInviteModal()">&times;</span>
      <h2>
        Inviter des utilisateurs
      </h2>
      <ul class="invite-list">
        @each(user in users)
          <li>
            <span>{{ user.full_name }}</span>
            <div class="invite-actions">
              <button class="button invite" onclick="sendInvitation({{ user.id }})">Inviter</button>
            </div>
          </li>
        @endeach
      </ul>
    </div>
  </div>
    <script>

      function formatDate(dateString) {
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        return new Date(dateString).toLocaleDateString('fr-FR', options);
      }
      function loadTasks(){
        fetch(`/tasks?teamId={{ team.id }}`, {
          method: "GET",
          credentials: "include",
          headers: {
            "Content-Type": "application/json"
          }
        }).then(response => {
          if (!response.ok) {
            return response.json().then(errorData => {
              throw new Error("Erreur lors du chargement des tâches : " + errorData.message);
            });
          }
          return response.json();
        }).then(data => {
          console.log("Tâches récupérées :");
          console.log(data);
          // on récupère l'élément timeline et on supprime les tâches déjà affichées
          const timeline = document.querySelector(".timeline");
          timeline.innerHTML = "";
          // on trie les tâches par date de début
          data.sort((a, b) => new Date(a.startDate) - new Date(b.startDate));
          data.forEach(task => {
            const taskElement = document.createElement("div");
            taskElement.classList.add("task");
            taskElement.classList.add(task.status);
            taskElement.innerHTML = `
              <div class="content">
                <span>${task.title}</span>
                <span>${task.description}</span>
                <span>${formatDate(task.startDate)} - ${formatDate(task.endDate)}</span>
                <span>${task.priority}</span>
                <span>${task.status}</span>
              </div>
            `;
            timeline.appendChild(taskElement);
          });
        }).catch(error => {
          console.error("Erreur lors du chargement des tâches :", error);
          alert("Erreur lors du chargement des tâches : " + error.message);
        });
      }

      loadTasks();
      function toggleTaskModal() {
        const today = new Date().toISOString().split('T')[0];
        const tomorrow = new Date(Date.now() + 86400000).toISOString().split('T')[0];
        document.getElementById('taskStartDate').value = today;
        document.getElementById('taskEndDate').value = tomorrow;
        document.getElementById("taskModal").style.display = "block";
      }

      function closeTaskModal() {
        document.getElementById("taskModal").style.display = "none";
      }
      function openInviteModal() {
        document.getElementById("inviteModal").style.display = "block";
      }
      
      function closeInviteModal() {
        document.getElementById("inviteModal").style.display = "none";
      }

      document.getElementById('taskForm').addEventListener('submit', function(event) {
        event.preventDefault();
        addTask();
      });

      function addTask() {
  
        const name = document.getElementById("taskName").value;
        const description = document.getElementById("taskDescription").value;
        const status = document.getElementById("taskStatus").value;
        const start_date = document.getElementById("taskStartDate").value;
        const end_date = document.getElementById("taskEndDate").value;
        const priority = document.getElementById("taskPriority").value;
        const users = Array.from(document.getElementById("taskUsers").selectedOptions).map(option => option.value);
      
        console.log("Données de la tâche :", {
          teamId: {{ team.id }},
          title: name,
          description: description,
          priority: priority,
          status: status,
          start_date: start_date,
          end_date: end_date,
          users: users,
        });
        alert("Ajout de tâche");
        fetch(`/tasks`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "credentials": "include"
          },
          body: JSON.stringify({
            teamId: {{ team.id }},
            title: name,
            description: description,
            priority: priority,
            status: status,
            start_date: start_date,
            end_date: end_date,
            users: users,
          })
        }).then(response => {
          if (!response.ok) {
            alert("Erreur lors de l'ajout de la tâche : " + response );
            return response.json().then(errorData => {
              throw new Error("Erreur lors de l'ajout de la tâche : " + errorData.message);
            });
          }
          return response.json();
        }).then(data => {
          alert("Tâche ajoutée avec succès.");
          // on recharge la page pour mettre à jour la liste des tâches
          location.reload();
        }).catch(error => {
          console.error("Erreur lors de l'ajout de la tâche :", error);
          alert("Erreur lors de l'ajout de la tâche : " + error.message);
        });
        loadTasks();
        // on ferme la modal après avoir ajouté la tâche
        closeTaskModal();
      }


      
      function sendInvitation(userId) {
        fetch(`/send_invitation`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            credentials: "include"
          },
          body: JSON.stringify({
            userId: userId,
            teamId: {{ team.id }}
          })
        }).then(response => {
          if (!response.ok) {
            return response.json().then(errorData => {
              throw new Error("Erreur lors de l'envoi de l'invitation : " + errorData.message);
            });
          }
          return response.json();
        }).then(data => {
          alert("Invitation envoyée avec succès.");
          // on recharge la page pour mettre à jour la liste des membres
          location.reload();
        }).catch(error => {
          alert("Erreur lors de l'envoi de l'invitation : " + error.message);
        });
        // on ferme la modal après avoir envoyé l'invitation 
        closeInviteModal();
      }
      
      function promoteToManager(userId) {
        fetch(`/promote_user`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            credentials: "include"
          },
          body: JSON.stringify({
            userId: userId,
            teamId: {{ team.id }}
          })
        }).then(response => {
          if (!response.ok) {
            return response.json().then(errorData => {
              throw new Error("Erreur lors de la promotion de l'utilisateur : " + errorData.message);
            });
          }
          return response.json();
        }).then(data => {
          alert("Utilisateur promu avec succès.");
          // on recharge la page pour mettre à jour la liste des membres
          location.reload();
        }).catch(error => {
          alert("Erreur lors de la promotion de l'utilisateur : " + error.message);
        });
      }
      
      function demoteManager(userId) {
        fetch(`/demote_user`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            credentials: "include"
          },
          body: JSON.stringify({
            userId: userId,
            teamId: {{ team.id }}
          })
        }).then(response => {
          if (!response.ok) {
            return response.json().then(errorData => {
              throw new Error("Erreur lors de la rétrogradation de l'utilisateur : " + errorData.message);
            });
          }
          return response.json();
        }).then(data => {
          alert("Utilisateur rétrogradé avec succès.");
          // on recharge la page pour mettre à jour la liste des membres
          location.reload();
        }).catch(error => {
          alert("Erreur lors de la rétrogradation de l'utilisateur : " + error.message);
        });
      }
      
      function deleteUser(userId) {
        fetch(`/delete_from_team`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            credentials: "include"
          },
          body: JSON.stringify({
            userId: userId,
            teamId: {{ team.id }}
          })
        }).then(response => {
          if (!response.ok) {
            return response.json().then(errorData => {
              throw new Error("Erreur lors de la suppression de l'utilisateur : " + errorData.message);
            });
          }
          return response.json();
        }).then(data => {
          alert("Utilisateur supprimé avec succès.");
          // on recharge la page pour mettre à jour la liste des membres
          location.reload();
        }).catch(error => {
          alert("Erreur lors de la suppression de l'utilisateur : " + error.message);
        });
      }
    </script>
    <script type="module">
      import {
        Transmit
      } from "/node_modules/@adonisjs/transmit-client";
      
      export const transmit = new Transmit({
        baseUrl: window.location.origin
      });
      
      function scrollToBottom() {
        const chatBox = document.getElementById("chatBox");
        chatBox.scrollTop = chatBox.scrollHeight;
      }
      
      const notifSubscription = transmit.subscription(`chats/team-{{ team.id }}/messages`);
      
      notifSubscription.create();
      
      async function loadMessages(receiverId) {
        const response = await fetch(`/team_messages?teamId={{ team.id }}`, {
          method: "GET",
          credentials: "include",
          // Permet d'envoyer les cookies de session
          headers: {
            "Content-Type": "application/json"
          }
        });
        console.log(`Chargement des messages pour l'utilisateur ${receiverId}`);
        console.log(response);
        return response.json();
      }
      
      const messages = await loadMessages({{ team.id }});
      
      console.log(messages);
      
      const chatBox = document.querySelector(".chat-box");
      
      messages.forEach(message => {
        const messageClass = message.senderId === {{ auth.user.id }} ? "sent" : "received";
        const formattedTime = new Date(message.createdAt).toLocaleTimeString("fr-FR");
        chatBox.innerHTML += `
            <div class="message-container ${messageClass}" style="display: flex;  margin-bottom: 10px;">
              <img 
                src="${message.sender.imageUrl}" 
                alt="Photo de ${message.senderName}" 
                style="width: 30px; height: 30px; border-radius: 50%; margin-right: 10px; object-fit: cover;"
              />
              <p class="message-content" style="margin: 0;"><strong>${message.senderId === {{ auth.user.id }} ? "Vous" : message.senderName}</strong>: ${message.content} <span style="font-size: 0.8em; color: gray;">(${formattedTime})</span></p>
            </div>`;
      });
      
      scrollToBottom();
      
      async function sendMessage() {
        const message = document.getElementById("messageInput").value;
        const response = await fetch(`/team_messages`, {
          method: "POST",
          credentials: "include",
          // Permet d'envoyer les cookies de session
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            teamId: {{team.id}},
            message: message
          })
        });
        console.log(response);
        return response.json();
      }
      
      document.getElementById("sendButton").addEventListener("click", sendMessage);
      
      let unsubscribe = notifSubscription.onMessage(data => {
        console.log("Nouveau message reçu :", data);
        const formattedTime = new Date(data.createdAt).toLocaleTimeString("fr-FR");
        chatBox.innerHTML += `
            <div class="message-container received" style="display: flex;  margin-bottom: 10px;">
              <img 
                src="${data.senderImage}" 
                alt="Photo de ${data.senderName}" 
                style="width: 30px; height: 30px; border-radius: 50%; margin-right: 10px; object-fit: cover;"
              />
              <p class="message-content" style="margin: 0;"><strong>${data.senderName === "{{ auth.user.fullName }}" ? "Vous" : data.senderName}</strong>: ${data.message} <span style="font-size: 0.8em; color: gray;">(${formattedTime})</span></p>
            </div>`;
        scrollToBottom();
      });
    </script>
  </body>
</html>
