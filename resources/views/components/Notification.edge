@if (auth.isAuthenticated)
  <div id="notification-button" class="notification-button" onclick="toggleNotification()">
    <img src="/resources/img/notif.png" alt="notification" class="notification-img">
    <span id="title-notification" class="noselect">Notifications (0)</span>
  </div>

  <!-- Notification Panel -->
  <div id="notification-panel" class="notification-panel noselect">
    <div class="notification-header1 noselect">
      <h3 class="noselect">
        Notifications
      </h3>
      <button class="close-btn" onclick="toggleNotification()">X</button>
    </div>
    <div class="notification-body noselect">
      <div class="label">
        Notification(s) non lue(s) :
      </div>
      <ul id="notification-list">
      </ul>
    </div>
  </div>
@endif

<script>
  // Fonction pour afficher ou cacher le panel de notification
  function toggleNotification() {
    var notificationPanel = document.getElementById("notification-panel");
    if (notificationPanel.style.display === "none" || notificationPanel.style.display === "") {
      notificationPanel.style.display = "block";
    } else {
      notificationPanel.style.display = "none";
    }
  }

  function deleteNotification(notificationId) {
    fetch(`/notifications/${notificationId}`, {
      method: 'DELETE',
      credentials: 'include',
    })
    .then(response => response.json())
    .then(data => {
      // Supprimer la notification de l'interface utilisateur
      const notificationItem = document.getElementById(`notification-${notificationId}`);
      if (notificationItem) {
        notificationItem.remove();
      }
      const nbNotifications = parseInt(document.getElementById('title-notification').innerText.match(/\((\d+)\)/)[1]);
      document.getElementById('title-notification').innerText = `Chat (${nbNotifications - 1})`;
    })
    .catch(error => {
      console.error('Erreur lors de la suppression de la notification:', error);
    });
  }

  function acceptInvitation(notificationId) {
    fetch(`/accept_invitation/${notificationId}`, {
      method: 'GET',
      credentials: 'include',
    })
    .then(response => response.json())
    .then(data => {
      alert('Invitation acceptée');
      // Vous pouvez également mettre à jour l'interface utilisateur ici
      const notificationItem = document.getElementById(`notification-${notificationId}`);
      if (notificationItem) {
        notificationItem.remove();
      }
      const nbNotifications = parseInt(document.getElementById('title-notification').innerText.match(/\((\d+)\)/)[1]);
      document.getElementById('title-notification').innerText = `Chat (${nbNotifications - 1})`;
    })
    .catch(error => {
      console.error('Erreur lors de l\'acceptation de l\'invitation:', error);
    });
  }

  function declineInvitation(notificationId) {
    fetch(`/decline_invitation`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ notificationId }),
      credentials: 'include',
    })
    .then(response => response.json())
    .then(data => {
      alert('Invitation déclinée');
      // Supprimer la notification de l'interface utilisateur
      const notificationItem = document.getElementById(`notification-${notificationId}`);
      if (notificationItem) {
        notificationItem.remove();
      }
      const nbNotifications = parseInt(document.getElementById('title-notification').innerText.match(/\((\d+)\)/)[1]);
      document.getElementById('title-notification').innerText = `Chat (${nbNotifications - 1})`;
    })
    .catch(error => {
      console.error('Erreur lors du déclin de l\'invitation:', error);
    });
  }
</script>

<script type="module">
  import { Transmit } from "/node_modules/@adonisjs/transmit-client";

  export const transmit = new Transmit({
    baseUrl: window.location.origin
  });

  const notifSubscription = transmit.subscription("notifications/" + {{ auth.user.id }});
  notifSubscription.create();

  const NotificationType = {
    MESSAGE: 'MESSAGE',
    TEAM_INVITE: 'TEAM_INVITE',
    TEAM_INVITE_ACCEPTED: 'TEAM_INVITE_ACCEPTED',
    TEAM_INVITE_DECLINED: 'TEAM_INVITE_DECLINED',
    TEAM_BANNED: 'TEAM_BANNED',
  };

  function displayNotif(notification) {
    console.log("New notification received", notification);
    const notificationList = document.getElementById("notification-list");
    const notificationItem = document.createElement("li");
    notificationItem.id = `notification-${notification.notificationId}`;
    switch (notification.type) {
      case NotificationType.MESSAGE:
        notificationItem.classList.add("message-notification");
        notificationItem.id = "user-" + notification.user.id;
        notificationItem.innerHTML = `<a href="/personal_chat?receiver_id=${notification.user.id}" class="notification-link">Nouveau message de <img src="${notification.image}" alt="${notification.senderName}" class="notification-user-img">${notification.user.fullName}</a> `;
        break;
      case NotificationType.TEAM_INVITE:
        notificationItem.classList.add("team-invite-notification");
        notificationItem.innerHTML = `<div><p><img src="${notification.inviterImage}" class="img-inviter"> ${notification.inviterName} vous a invité à rejoindre l'équipe <img src="${notification.teamImage}" class="img-team"> ${notification.teamName}</p>
          <div class="notification-buttons">
            <button onclick="acceptInvitation(${notification.notificationId})">Accepter</button>
            <button onclick="declineInvitation(${notification.notificationId})">Décliner</button>
          </div>
        </div>`;
        break;
      case NotificationType.TEAM_INVITE_ACCEPTED:
        notificationItem.classList.add("team-invite-accepted-notification");
        notificationItem.innerHTML = `
          ${notification.inviterName} a accepté l'invitation à rejoindre l'équipe ${notification.teamName}
          <button class="close-btn-notification" onclick="deleteNotification(${notification.notificationId})">X</button>
        `;
        break;
      case NotificationType.TEAM_INVITE_DECLINED:
        notificationItem.classList.add("team-invite-declined-notification");
        notificationItem.innerHTML = `
          ${notification.inviterName} a refusé votre invitation à rejoindre l'équipe ${notification.teamName}
          <button class="close-btn-notification" onclick="deleteNotification(${notification.notificationId})">X</button>
        `;
        break;
      case NotificationType.TEAM_BANNED:
        notificationItem.classList.add("team-banned-notification");
        notificationItem.innerHTML = `
          ${notification.inviterName} a été banni de l'équipe ${notification.teamName}
          <button class="close-btn-notification" onclick="deleteNotification(${notification.notificationId})">X</button>
        `;
        break;
      default:
        notificationItem.innerText = "Notification inconnue";
    }
    notificationList.appendChild(notificationItem);
    const titleNotification = document.getElementById("title-notification");
    titleNotification.innerText = "Notifications (" + notificationList.children.length + ")";
  }

  // on charge les notifications existantes en faisant une requête à l'API /notifications
  const response = await fetch('/notifications', {
    method: 'GET',
    credentials: 'include',
    headers: {
      'Content-Type': 'application/json',
    },
  });
  const notifications = await response.json();
  notifications.notifications.forEach(notification => {
    displayNotif(notification);
  });
  notifications.messages.forEach(message => {
    displayNotif(message);
  });

  notifSubscription.onMessage(notification => {
    console.log("New notification received", notification);
    const notificationList = document.getElementById("notification-list");
    const notificationItem = document.createElement("li");
    notificationItem.id = `notification-${notification.notificationId}`;
    switch (notification.type) {
      case NotificationType.MESSAGE:
        notificationItem.classList.add("message-notification");
        notificationItem.id = "user-" + notification.senderId;
        notificationItem.innerHTML = `<a href="/personal_chat?receiver_id=${notification.senderId}" class="notification-link">Nouveau message de <img src="${notification.senderImage}" alt="${notification.senderName}" class="notification-user-img">${notification.senderName}</a> `;
        break;
      case NotificationType.TEAM_INVITE:
        notificationItem.classList.add("team-invite-notification");
        notificationItem.innerHTML = `<div><p><img src="${notification.inviterImage}" class="img-inviter"> ${notification.inviterName} vous a invité à rejoindre l'équipe <img src="${notification.teamImage}" class="img-team"> ${notification.teamName}</p>
          <div class="notification-buttons">
            <button onclick="acceptInvitation(${notification.notificationId})">Accepter</button>
            <button onclick="declineInvitation(${notification.notificationId})">Décliner</button>
          </div>
        </div>`;
        break;
      case NotificationType.TEAM_INVITE_ACCEPTED:
        notificationItem.classList.add("team-invite-accepted-notification");
        notificationItem.innerHTML = `
          ${notification.inviterName} a accepté l'invitation à rejoindre l'équipe ${notification.teamName}
          <button class="close-btn-notification" onclick="deleteNotification(${notification.notificationId})">X</button>
        `;
        break;
      case NotificationType.TEAM_INVITE_DECLINED:
        notificationItem.classList.add("team-invite-declined-notification");
        notificationItem.innerHTML = `
          ${notification.inviterName} a refusé votre invitation à rejoindre l'équipe ${notification.teamName}
          <button class="close-btn-notification" onclick="deleteNotification(${notification.notificationId})">X</button>
        `;
        break;
      case NotificationType.TEAM_BANNED:
        notificationItem.classList.add("team-banned-notification");
        notificationItem.innerHTML = `
          ${notification.inviterName} a été banni de l'équipe ${notification.teamName}
          <button class="close-btn-notification" onclick="deleteNotification(${notification.notificationId})">X</button>
        `;
        break;
      default:
        notificationItem.innerText = "Notification inconnue";
    }
    notificationList.appendChild(notificationItem);
    const titleNotification = document.getElementById("title-notification");
    titleNotification.innerText = "Notifications (" + notificationList.children.length + ")";
  });
</script>

<style>
  /* Styles pour le bouton et le panneau de notification */
.notification-button {
  position: fixed;
  top: 80px; /* Ajustez la position selon vos besoins */
  right: 20px;
  padding: 15px 30px;
  background-color: #5A45FF;
  color: white;
  border-radius: 25px;
  font-size: 16px;
  cursor: pointer;
  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);
  transition: background-color 0.3s ease;
  display: flex;
  align-items: center;
}

.notification-button:hover {
  background-color: #4a3ae0;
}

.notification-img {
  width: 24px;
  height: 24px;
  margin-right: 10px;
}

.notification-panel {
  position: fixed;
  top: 138px; /* Ajustez la position selon vos besoins */
  right: 20px;
  width: 350px;
  height: 400px;
  background-color: white;
  box-shadow: 0px 2px 15px rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  display: none; /* Par défaut, le panneau est caché */
  overflow: hidden;
  z-index: 1000;
}

.notification-header1 {
  background-color: #5A45FF;
  color: white;
  padding: 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.notification-header1 h3 {
  margin: 0;
  font-size: 18px;
}
.notification-link {
  display: block;
  text-decoration: none;
  color: inherit; /* Hérite de la couleur du parent */
  padding: 10px;
}

.notification-link:hover {
  background-color: #f0f0f0; /* Couleur de fond au survol */
}

.close-btn {
  background: none;
  border: none;
  color: white;
  font-size: 18px;
  cursor: pointer;
}

.notification-body {
  padding: 20px;
  font-size: 16px;
  color: #46444c;
  height: calc(100% - 50px);
  overflow-y: auto;
}

.label {
  font-size: 16px;
  margin-bottom: 10px;
}

#notification-list {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

#notification-list li {
  padding: 5px;
  border-bottom: 1px solid #ddd;
}

#notification-list li a {
  color: #5A45FF;
  text-decoration: none;
  margin-left: 0px;
}

#notification-list li a:hover {
  text-decoration: underline;
}

.message-notification {
  background-color: #e0f7fa;
}

.team-invite-notification {
  background-color: #fff3e0;
}

.team-invite-accepted-notification {
  background-color: #e8f5e9;
}

.team-invite-declined-notification {
  background-color: #ffebee;
}
.notification-user-img {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  margin-right: 0px;
  vertical-align: middle;
}
.img-inviter {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  margin-right: 0px;
  vertical-align: middle;
}
.img-team{
  width: 20px;
  height: 20px;
  border-radius: 50%;
  margin-right: 0px;
  vertical-align: middle;
}
.notification-buttons {
  display: flex;
  gap: 10px;
  margin-top: 10px;
}

.notification-buttons button {
  padding: 5px 10px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.notification-buttons button:hover {
  background-color: #ddd;
}

.notification-buttons button:first-child {
  background-color: #4CAF50; /* Vert pour accepter */
  color: white;
}

.notification-buttons button:last-child {
  background-color: #f44336; /* Rouge pour décliner */
  color: white;
}
.close-btn-notification {
  background: none;
  border: none;
  color: red;
  font-size: 10px;
  cursor: pointer;
  float: right;
  margin-left: 5px;
}

/* Media queries pour rendre le panneau de notification responsive */
@media (max-width: 600px) {
  .notification-panel {
    width: 90%;
    right: 5%;
    top: 100px;
    height: auto;
    max-height: 80vh;
  }

  .notification-button {
    top: 20px;
    right: 10px;
    padding: 10px 20px;
    font-size: 14px;
  }

  .notification-header1 {
    padding: 5px;
  }

  .notification-body {
    padding: 10px;
  }

  .notification-buttons button {
    padding: 5px;
    font-size: 12px;
  }
}
</style>