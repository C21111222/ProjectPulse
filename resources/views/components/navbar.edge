@include('components/LogoutConfirmation')
@include('components/Connexion')

@if (auth.isAuthenticated)
  <!-- Navbar with project name, profile icon, and logout button -->
  <nav class="navbar">
    <a href="/home" class="navbar-logo">ProjectPulse</a>
    <div class="search-container">
      <form action="/search" method="GET" class="search-bar" autocomplete="off">
        <input
          type="text"
          id="search-input"
          name="query"
          placeholder="Rechercher une page (ex : profil, dashboard, chat)"
          aria-label="Recherche"
          oninput="filterSuggestions()"
        />
        <button type="submit">Rechercher</button>
      </form>
      <ul id="suggestions-list" class="suggestions-list"></ul>
    </div>
    <div class="navbar-right">
      <a href="/profile" class="profile-icon">
        <img src="{{ auth.user.imageUrl }}" alt="Profile" />
      </a>
      <a href="/dashboard" class="dashboard-btn">Dashboard</a>
      <a href="#" class="logout-btn" onclick="showLogoutConfirmation()">Déconnexion</a>
    </div>
  </nav>
@else
  <!-- Navbar with project name and login button -->
  <nav class="navbar">
    <a href="/" class="navbar-logo">ProjectPulse</a>
    <div class="navbar-right">
      <a href="#" class="login-btn" onclick="showConnexion()">Connexion</a>
    </div>
  </nav>
@endif

@if(flashMessages.has('notification'))
  <script>
    Swal.fire({
      icon: "{{ flashMessages.get('notification').type }}",
      // 'success', 'error', etc.
      title: "{{ flashMessages.get('notification').message }}",
      showConfirmButton: false,
      timer: 3e3
    });
  </script>
@end
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11">
  
</script>
<style>
  /* Style pour la barre de navigation */
  
  .navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #5A45FF;
    color: white;
    padding: 15px 30px;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
  }
  
  .navbar-logo {
    font-size: 24px;
    font-weight: bold;
    text-decoration: none;
    color: white;
  }
  
  .navbar-right {
    display: flex;
    align-items: center;
  }
  
  .navbar-right a {
    color: white;
    text-decoration: none;
    font-size: 16px;
    margin-left: 20px;
  }
  
  .navbar-right .profile-icon img {
    width: 30px;
    height: 30px;
    border-radius: 50%;
  }
  
  .navbar-right .login-btn,
  .navbar-right .logout-btn {
    background-color: #4a3ae0;
    padding: 8px 16px;
    border-radius: 5px;
    transition: background-color 0.3s;
  }

  .navbar-right .dashboard-btn {
    background-color: #5A45FF;
    padding: 8px 16px;
    border-radius: 5px;
    transition: background-color 0.3s;
  }
  
  .navbar-right .login-btn:hover,
  .navbar-right .logout-btn:hover,
  .navbar-right .dashboard-btn:hover {
    background-color: #3b29b3;
  }
  /* Barre de recherche */
/* Centrer la barre de recherche dans la page */
.search-container {
  position: absolute; /* Se détache du flux normal */
  top: 50%; /* Position verticale au milieu */
  left: 50%; /* Position horizontale au milieu */
  transform: translate(-50%, -50%); /* Centre par rapport au point de référence */
  z-index: 1001; /* Place la barre devant les autres éléments */
}

.search-bar {
  display: flex;
  justify-content: center;
  align-items: center;
}

.search-bar input {
  width: 400px;
  padding: 10px 15px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 16px;
  transition: border-color 0.3s;
}

.search-bar input:focus {
  outline: none;
  border-color: #5A45FF; /* Couleur de focus */
}

.search-bar button {
  margin-left: 10px;
  padding: 10px 20px;
  background-color: #4a3ae0;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.search-bar button:hover {
  background-color: #3b29b3;
}

/* Ajustements pour la navbar */
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #5A45FF;
  color: white;
  padding: 15px 30px;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
}
.suggestions-list {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background: rgb(105, 103, 220);
  border-radius: 4px;
  max-height: 200px;
  overflow-y: auto;
  z-index: 1001;
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.suggestions-list li {
  padding: 10px;
  cursor: pointer;
  transition: background-color 0.3s;
  background-color: #566ed6;
}

.suggestions-list li:hover {
  background-color: #8f97f3;
}

.suggestions-list li.selected {
  background-color: #5A45FF;
  color: white;
}

@media (max-width: 768px) {
  .search-bar input {
    width: 80%; /* Réduit la largeur de l'input */
  }

  .search-bar button {
    font-size: 14px;
    padding: 8px 16px;
  }
}

</style>

<script>
  // Liste des pages prédéfinies
  const pages = ["Profil", "Dashboard", "Chat", "Home"];
  
  // Liste des utilisateurs, sera remplie via l'API
  let users = [];
  
  // Éléments DOM
  const input = document.getElementById("search-input");
  const suggestionsList = document.getElementById("suggestions-list");
  
  // Fonction pour récupérer tous les utilisateurs
  async function getAllUsers() {
    const response = await fetch('/users', {
      method: 'GET',
      credentials: 'include', // Permet d'envoyer les cookies de session
      headers: {
        'Content-Type': 'application/json',
      },
    });
    const data = await response.json();
    users = data;
  }
  
  // Filtrer les suggestions selon la saisie
  function filterSuggestions() {
    const query = input.value.toLowerCase();
  
    // Si la saisie est vide, on affiche les pages
    if (query === "") {
      suggestionsList.innerHTML = "";
      return;
    }
  
    // On filtre les utilisateurs
    const filteredUsers = users.filter(user => 
      user.fullName.toLowerCase().includes(query)
    );
  
    // Afficher les utilisateurs filtrés sous forme de [user] fullName
    const filteredSuggestions = [
      ...pages.filter(page => page.toLowerCase().includes(query)), // Pages filtrées
      ...filteredUsers.map(user => `[user] ${user.fullName}`) // Utilisateurs filtrés
    ];
  
    suggestionsList.innerHTML = filteredSuggestions.length
      ? filteredSuggestions
          .map((suggestion) => `<li onclick="selectSuggestion('${suggestion}')">${suggestion}</li>`)
          .join("")
      : `<li>Aucune suggestion trouvée</li>`;
  }
  
  // Ajouter une suggestion à l'input au clic
  function selectSuggestion(suggestion) {
    input.value = suggestion;
    suggestionsList.innerHTML = ""; // Cache les suggestions après sélection
  
    // Si c'est une page, on redirige directement
    if (pages.includes(suggestion)) {
      switch (suggestion) {
        case "Profil":
          window.location.href = "/profile";
          break;
        case "Dashboard":
          window.location.href = "/dashboard";
          break;
        case "Chat":
          window.location.href = "/chat";
          break;
        case "Home":
          window.location.href = "/home";
          break;
        default:
          break;
      }
    } else {
      // Si la suggestion est un nom d'utilisateur sous forme de "[user] fullName", on extrait l'ID de l'utilisateur
      const userFullName = suggestion.replace('[user] ', '');
      const user = users.find(user => user.fullName === userFullName);
      // si l'utilisateur est l'utilisateur connecté, on redirige vers le profil
      if (user.id === {{ auth.user.id }}) {
        window.location.href = "/profile";
      } else {
        window.location.href = `/public_profile?user_id=${user.id}`;
      }
    }
  }
  
  // Initialiser les utilisateurs dès que la page est chargée
  window.onload = async function() {
    await getAllUsers(); // On récupère les utilisateurs au démarrage
  }
  
  // Gestion de l'affichage des suggestions
  input.addEventListener("click", () => {
    suggestionsList.style.display = "block"; // Affiche les suggestions quand on clique dans le champ
  });
  
  // Fermer les suggestions quand on clique en dehors
  document.addEventListener("click", (event) => {
    if (!event.target.closest(".search-container")) {
      suggestionsList.style.display = "none";
    }
  });
  </script>